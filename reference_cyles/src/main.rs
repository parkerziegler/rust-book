use crate::List::{Cons, Nil};
use std::cell::RefCell;
use std::rc::{Rc, Weak};

#[derive(Debug)]
enum List {
    Cons(i32, RefCell<Rc<List>>),
    Nil,
}

impl List {
    fn tail(&self) -> Option<&RefCell<Rc<List>>> {
        match self {
            Cons(_item, tail) => Some(tail),
            Nil => None,
        }
    }
}

#[derive(Debug)]
struct Node {
    value: i32,
    parent: RefCell<Weak<Node>>,
    children: RefCell<Vec<Rc<Node>>>,
}

// While its difficult to create reference cycles in Rust, it's not impossible.
// The main function below demonstrates how a reference cycle can be created.
fn main() {
    // Create an Rc<List> — this will count references to this particular list, a.
    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));

    println!("a initial rc count = {}", Rc::strong_count(&a)); // 1
    println!("a next item = {:?}", a.tail()); // Nil

    // Create a second Rc<List> that references the a list.
    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));

    println!("a rc count after b creation = {}", Rc::strong_count(&a));
    println!("b initial rc count = {}", Rc::strong_count(&b));
    println!("b next item = {:?}", b.tail());

    if let Some(link) = a.tail() {
        // Now we modify the end of the a list to point to the b list, which creates
        // the reference cycle. b references a and, after this line, a references b.
        // This will lead to stack overflow if L45 is uncommented.
        *link.borrow_mut() = Rc::clone(&b);
    }

    println!("b rc count after changing a = {}", Rc::strong_count(&b));
    println!("a rc count after changing a = {}", Rc::strong_count(&a));

    // Uncomment the next line to see the cycle — it will overflow the stack.
    // println!("a next item = {:?}", a.tail());

    // One way to break reference cycles is to use weak references, Weak<T>.
    // When we weakly reference a value, its weak count increments by 1.
    // Unlike its strong count, the weak count of an Rc does not have to be 0
    // for the Rc instance to be cleaned up. Weak<T> is useful when you don't
    // need to express an ownership relationship with Rc<T>.

    // leaf is a single Node with no children and, currently, no parent.
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());

    // branch is a single Node with one child, leaf.
    let branch = Rc::new(Node {
        value: 5,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    });

    // Set leaf's parent to be a Weak<T> reference to branch.
    *leaf.parent.borrow_mut() = Rc::downgrade(&branch);

    // We call .upgrade() on the borrowed leaf parent reference to convert
    // from a Weak<T> to an Option<Rc<T>> when printing.
    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());

    // We can see this process more intimately by tracking the strong and
    // weak counts of leaf and branch.
    let leaf_2 = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!(
        "leaf_2 strong = {} and weak = {}",
        Rc::strong_count(&leaf_2), // 1 – generated by creation
        Rc::weak_count(&leaf_2)    // 0 – no weak references
    );

    {
        let branch_2 = Rc::new(Node {
            value: 5,
            parent: RefCell::new(Weak::new()),
            children: RefCell::new(vec![Rc::clone(&leaf_2)]),
        });

        *leaf_2.parent.borrow_mut() = Rc::downgrade(&branch_2);

        println!(
            "branch_2 strong = {} and weak = {}",
            Rc::strong_count(&branch_2), // 1 – generated by creation
            Rc::weak_count(&branch_2)    // 1 – weakly referenced by leaf_2
        );

        println!(
            "leaf_2 strong = {} and weak = {}",
            Rc::strong_count(&leaf_2), // 2 – generated by creation + cloned by branch
            Rc::weak_count(&leaf_2)    // 0 – no weak references
        );
    }

    println!("leaf_2 parent {:?}", leaf.parent.borrow().upgrade());
    println!(
        "leaf_2 strong = {} and weak = {}",
        Rc::strong_count(&leaf_2), // 1 – generated by creation
        Rc::weak_count(&leaf_2)    // 0 – no weak references
    );
}
